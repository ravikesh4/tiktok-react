{"version":3,"sources":["Components/VideoFooter.js","Components/VideoSidebar.js","Components/Video.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["VideoFooter","channel","description","song","className","mode","index","src","VideoSidebar","likes","shares","messages","useState","liked","setLiked","fontSize","onClick","e","Video","url","playing","setPlaying","videoRef","useRef","loop","current","pause","play","ref","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","videos","setVideos","useEffect","collection","onSnapshot","snapshot","docs","map","doc","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f86392d3.chunk.js","sourcesContent":["import React from 'react'\r\nimport './VideoFooter.css'\r\nimport MusicNoteIcon from '@material-ui/icons/MusicNote';\r\nimport Ticker from 'react-ticker';\r\n\r\nfunction VideoFooter({ channel, description, song}) {\r\n    return (\r\n        <div className=\"videoFooter\">\r\n            <div className=\"videoFooter__text\">\r\n                <h3>@{channel}</h3>\r\n                <p>{description}</p>\r\n                <div className=\"videoFooter__ticker\">\r\n                    <MusicNoteIcon className=\"videoFooter__icon\" />\r\n                    <Ticker mode=\"smooth\" className=\"ticker\">\r\n                        {({ index }) => (\r\n                            <>\r\n                                <p>{song} </p>\r\n                            </>\r\n                        )\r\n                        }\r\n                    </Ticker>\r\n                </div>\r\n            </div>\r\n            <img className=\"videoFooter__record\" src=\"https://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/disc-vinyl-icon.png\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoFooter;\r\n","import React, { useState } from 'react';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport MessageIcon from '@material-ui/icons/Message';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\n\r\nimport './VideoSidebar.css'\r\n\r\nfunction VideoSidebar( { likes, shares, messages}) {\r\n\r\n    const [liked, setLiked] = useState(false)\r\n\r\n    return (\r\n        <div className=\"videoSidebar\">\r\n            <div className=\"videoSidebar__button\">\r\n                {liked ? (\r\n                    <FavoriteIcon fontSize=\"large\" onClick={ e => setLiked(false)} />\r\n                ): (<FavoriteBorderIcon fontSize=\"large\" onClick={ e => setLiked(true)} />)}\r\n                <p>{ liked ? (likes + 1): likes}</p>\r\n            </div>\r\n            <div className=\"videoSidebar__button\">\r\n                <MessageIcon fontSize=\"large\" />\r\n                <p>{messages}</p>\r\n            </div>\r\n            <div className=\"videoSidebar__button\">\r\n                <ShareIcon fontSize=\"large\" />\r\n                <p>{shares}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoSidebar\r\n","import React, { useRef, useState } from 'react';\r\nimport './Video.css'\r\nimport VideoFooter from './VideoFooter'\r\nimport VideoSidebar from './VideoSidebar'\r\n\r\nfunction Video({\r\n    url,\r\n    channel,\r\n    description,\r\n    song,\r\n    likes,\r\n    messages,\r\n    shares\r\n}) {\r\n\r\n    const [playing, setPlaying] = useState(false)\r\n    const videoRef = useRef(null);\r\n\r\n    const onVideoPress = () => {\r\n        if (playing) {\r\n            videoRef.current.pause()\r\n            setPlaying(false)\r\n        } else {\r\n            videoRef.current.play()\r\n            setPlaying(true)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"video\">\r\n            <video className=\"video__player\" loop\r\n\r\n                onClick={onVideoPress}\r\n                ref={videoRef} src={url}></video>\r\n\r\n            <VideoFooter channel={channel} description={description} song={song} />\r\n            <VideoSidebar likes={likes} messages={messages} shares={shares} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Video\r\n","import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBCUVORDOjqtlfvn6eD96qK-2K4WjnwhA8\",\r\n    authDomain: \"tiktok-5fc7f.firebaseapp.com\",\r\n    databaseURL: \"https://tiktok-5fc7f.firebaseio.com\",\r\n    projectId: \"tiktok-5fc7f\",\r\n    storageBucket: \"tiktok-5fc7f.appspot.com\",\r\n    messagingSenderId: \"143420685528\",\r\n    appId: \"1:143420685528:web:794791c1281782b641ebad\",\r\n    measurementId: \"G-H1TXDHYQSC\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Video from './Components/Video';\nimport db from './firebase';\n\nfunction App() {\n\n  const [videos, setVideos] = useState([])\n\n  useEffect(() => {\n    db.collection('videos').onSnapshot(snapshot => (\n      setVideos(snapshot.docs.map(doc => doc.data()))\n    ))\n  }, [])\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__videos\">\n\n        {videos.map(({ url, channel, description, song, likes, messages, shares }) => (\n          <Video\n            url={url}\n            channel={channel}\n            description={description}\n            song={song}\n            likes={likes}\n            messages={messages}\n            shares={shares}\n          />\n        ))}\n        {/* <Video\n        url=\"http://techslides.com/demos/sample-videos/small.webm\"\n        channel=\"ravikesh\"\n        description=\"this is description\"\n        song=\"looser song\"\n        likes={200}\n        messages={120}\n        shares={100}\n        /> */}\n        {/* <Video />\n        <Video />\n        <Video />\n        <Video />\n        <Video />\n        <Video />\n        <Video />\n        <Video />\n        <Video />\n        <Video /> */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}